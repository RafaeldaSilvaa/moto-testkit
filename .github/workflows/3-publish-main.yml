name: Publish to PyPI

on:
  workflow_run:
    workflows: ["CI develop → main"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write

jobs:
  get-latest-tag:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get latest tag and bump
        id: bump
        run: |
          last_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          major=$(echo $last_tag | cut -d. -f1 | tr -d v)
          minor=$(echo $last_tag | cut -d. -f2)
          patch=$(echo $last_tag | cut -d. -f3)
          new_tag="v${major}.${minor}.$((patch+1))"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

  create-tag:
    needs: get-latest-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.get-latest-tag.outputs.new_tag }}
          git push origin ${{ needs.get-latest-tag.outputs.new_tag }}

  publish:
    needs: create-tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine pytest pytest-cov ruff bandit
      - name: Run Ruff
        run: |
          ruff check . --fix --exit-zero
          ruff format . || true
      - name: Security checks (não-bloqueante)
        run: bandit -r . --exit-zero
      - name: Run tests
        run: pytest --cov=./ --cov-report=term
      - name: Build package
        run: python -m build
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.CI }}
        run: python -m twine upload dist/*
