name: Publish to PyPI

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish:
    if: contains(github.event.head_commit.message, 'Merge pull request') || contains(github.event.head_commit.message, '(#')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # necessário para ver todas as tags
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt build twine toml

      - name: Determinar próxima tag e atualizar versão
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Última tag: $LAST_TAG"
          BASE="${LAST_TAG#v}"
          MAJOR=$(echo $BASE | cut -d. -f1)
          MINOR=$(echo $BASE | cut -d. -f2)
          PATCH=$(echo $BASE | cut -d. -f3)
          PATCH=$((PATCH+1))
          NEXT_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "Nova tag: $NEXT_TAG"
          
          # Atualiza versão no pyproject.toml
          python - <<EOF
          import toml
          path = "pyproject.toml"
          data = toml.load(path)
          data["project"]["version"] = "${NEXT_TAG#v}"
          with open(path, "w") as f:
              toml.dump(data, f)
          EOF

          echo "next_tag=$NEXT_TAG" >> $GITHUB_OUTPUT

      - name: Commit da nova versão
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ steps.version.outputs.next_tag }}"
          git tag ${{ steps.version.outputs.next_tag }}
          git push origin HEAD:master --tags

      - name: Build & Upload PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.CI }}
        run: |
          python -m build
          python -m twine upload dist/*
