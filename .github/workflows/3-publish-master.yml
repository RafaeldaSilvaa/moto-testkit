name: Publish to PyPI

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # Testes em todas as versões
  test:
    if: contains(github.event.head_commit.message, 'Merge pull request') || contains(github.event.head_commit.message, '(#')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - run: ruff check . --fix --exit-zero
      - run: bandit -r . --exit-zero
      - name: Prepare test environment
        run: |
          find . -type d \( -path "./.*" -o -path "./.venv*" \) \
            -prune -o -type d \
            -exec sh -c '[ -f "$0/__init__.py" ] || touch "$0/__init__.py"' {} \;
          export PYTHONPATH="$PYTHONPATH:$(pwd)"
      - run: pytest --cov=./ --cov-report=term

  # Publicação e tag
  publish:
    if: contains(github.event.head_commit.message, 'Merge pull request') || contains(github.event.head_commit.message, '(#')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # necessário para pegar todas as tags
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt build twine
      - name: Determinar próxima tag
        id: tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Última tag: $LAST_TAG"
          BASE="${LAST_TAG#v}"
          MAJOR=$(echo $BASE | cut -d. -f1)
          MINOR=$(echo $BASE | cut -d. -f2)
          PATCH=$(echo $BASE | cut -d. -f3)
          PATCH=$((PATCH+1))
          NEXT_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "Nova tag: $NEXT_TAG"
          echo "next_tag=$NEXT_TAG" >> $GITHUB_OUTPUT
      - name: Criar e enviar tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.tag.outputs.next_tag }}
          git push origin ${{ steps.tag.outputs.next_tag }}
      - name: Build & Upload PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.CI }}
        run: |
          python -m build
          python -m twine upload dist/*